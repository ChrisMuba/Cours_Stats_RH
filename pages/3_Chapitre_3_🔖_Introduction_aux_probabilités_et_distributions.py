


import streamlit as st

st.markdown("# Chapitre 3")
st.sidebar.markdown("# Chapitre 3")

st.title("Introductions aux probabilit√©s et distributions")

st.markdown("Ce chapitre sert d'**introduction** en fournissant un **aper√ßu des concepts de base en probabilit√©s et distributions, et leurs applications possibles dans le domaine des RH**.")

st.markdown("La **th√©orie des probabilit√©s** est la branche des math√©matiques qui **quantifie la possibilit√© qu'un √©v√©nement particulier se produise** (√©v√©nement al√©atoire). Cette possibilit√© est exprim√©e sous la forme d'un nombre compris entre 0 et 1.")

st.markdown("En termes simples, la probabilit√© quantifie le degr√© de certitude ou d'incertitude associ√© √† un r√©sultat sp√©cifique. Elle est calcul√©e en divisant le nombre de r√©sultats favorables par le nombre total de r√©sultats possibles dans une situation donn√©e.")


st.markdown("")


if st.button("Cliquez pour acceder au Chap.3 - **A/ Concepts de cl√©s**"):
    
    st.subheader("üìàChap.3-A/ Concepts de cl√©süìâ")

    st.markdown("")

    st.markdown("**Les concepts cl√©s en probabilit√©s comprennent les notions suivantes** :")

    
    st.markdown("")
    

    st.markdown("üí°**Variable al√©atoire** : c'est une quantit√© qui prend diff√©rentes valeurs √† la suite d'√©v√©nements al√©atoires. Une variable al√©atoire peut √™tre **discrete ou continue**.") 
    
    st.markdown("")

    st.markdown("üí°**Variable al√©atoire discr√®te** : C'est une variable qui ne peut prendre que certaines valeurs distinctes. Par exemple, le nombre d'employ√©s d'un service ne peut prendre que des valeurs enti√®res.")

    st.markdown("")
                
    st.markdown("üí°**Variable al√©atoire continue** : C'est une variable qui peut prendre n'importe quelle valeur dans une plage. Par exemple, le salaire d‚Äôun employ√© peut prendre n‚Äôimporte quelle valeur dans une certaine fourchette.")

    
    st.markdown("") 

    
    st.markdown("")

    st.markdown("- **Espace d'√©chantillonnage et √©v√©nements** : l'espace d'√©chantillonnage **repr√©sente l'ensemble de tous les r√©sultats possibles d'une exp√©rience**. Les **√©v√©nements sont des sous-ensembles** de l'espace d'√©chantillonnage, repr√©sentant des r√©sultats sp√©cifiques ou des combinaisons de r√©sultats.")

    
    st.markdown("")


    st.markdown("**üèÄApplication 15**")

    st.markdown("Illustrons les concepts d'espace d'√©chantillonnage et d'√©v√©nements par un sc√©nario hypoth√©tique dans lequel nous analysons les qualifications des candidats √† un poste vacant.")

    st.markdown("Ci-dessous un √©chantillon des donn√©es de 5 candidats :")
    
    
    import streamlit as st
    import plotly.express as px
    import pandas as pd

# Sample Data
    data = {
        "Candidat": ["Candidat 1", "Candidat 2", "Candidat 3", "Candidat 4", "Candidat 5"],
        "Exp√©rience (Ann√©es)": [2, 4, 3, 5, 1],
        "Dipl√¥me": ["Bachelor", "Master", "Bachelor", "Ph.D.", "Master"],
    }

    df = pd.DataFrame(data)

# Display the sample data
    st.dataframe(df)

# Calculate the sample space for education levels
    sample_space_education = df["Dipl√¥me"].unique()

# Calculate the sample space for experience
    sample_space_experience = df["Exp√©rience (Ann√©es)"].unique()

# Explain Sample Space and Events
    st.markdown("**Explication**:")
    st.markdown(
        """
    - **Espace √©chantillon pour les dipl√¥mes :** L'espace √©chantillon pour les dipl√¥mes comprend tous les dipl√¥mes possibles dans notre ensemble de donn√©es. Dans notre cas, il se compose de trois cat√©gories : ¬´ Bachelor ¬ª, ¬´ Master ¬ª et ¬´ Ph.D ¬ª

    - **Espace √©chantillon pour l'exp√©rience (ann√©es):** L'espace √©chantillon pour l'exp√©rience comprend toutes les ann√©es d'exp√©rience uniques dans notre ensemble de donn√©es. Dans ce cas, il s'agit des valeurs [2, 4, 3, 5, 1].

    Maintenant, d√©finissons quelques √©v√©nements bas√©s sur cet exemple d'espace :
    - √âv√©nement A : Candidats titulaires d'un Master
    - √âv√©nement B : Candidats ayant plus de 3 ans d'exp√©rience

    Nous pouvouns visualiser ces √©v√©nements ci-dessous.
    """
    )

# Define Events
    event_A = df[df["Dipl√¥me"] == "Master"]
    event_B = df[df["Exp√©rience (Ann√©es)"] > 3]

# Visualize Event A (Master's Degree)
    st.subheader("√âv√©nement A: Candidats avec un dipl√¥me de Master")
    fig_A = px.scatter(event_A, x="Exp√©rience (Ann√©es)", y="Candidat", color="Dipl√¥me", title="√âv√©nement A")
    st.plotly_chart(fig_A)

# Visualize Event B (More than 3 Years of Experience)
    st.subheader("√âv√©nement B: Candidats avec plus de 3 ans d'exp√©rience")
    fig_B = px.scatter(event_B, x="Exp√©rience (Ann√©es)", y="Candidat", color="Dipl√¥me", title="√âv√©nement B")
    st.plotly_chart(fig_B)


    st.markdown("")


    st.markdown("- **R√®gles de probabilit√©** : La **probabilit√© d'un √©v√©nement varie de 0** (√©v√©nement impossible) √† **1** (√©v√©nement certain). Il existe trois r√®gles principales de probabilit√© :")

    st.markdown("")

    st.markdown("La r√®gle de la somme : la probabilit√© que l'un des deux √©v√©nements exclusifs se produise est √©gale √† la somme de leurs probabilit√©s individuelles.")

    st.markdown("")
    
    st.markdown("La r√®gle du produit : la probabilit√© que deux √©v√©nements se produisent tous deux est √©gale au produit de leurs probabilit√©s individuelles.")

    st.markdown("")

    st.markdown("La r√®gle du compl√©ment : La probabilit√© qu‚Äôun √©v√©nement ne se produise pas est √©gale √† un moins la probabilit√© que l‚Äô√©v√©nement se produise.")


    st.markdown("")


    st.markdown("**üèÄApplication 16**")

    st.markdown("Illustrons les trois principales r√®gles de probabilit√© par un sc√©nario hypoth√©tique dans lequel nous analysons les candidats et leurs qualifications pour deux postes diff√©rents.")
    
    st.markdown("Nous devons embaucher des candidats pour deux postes : ¬´ Analyste de donn√©es RH ¬ª et ¬´ Coordonnateur RH ¬ª. Supposons que nous ayons deux groupes de candidats : un pour le poste ¬´ Analyste de donn√©es RH ¬ª et un autre pour le poste de ¬´ Coordonnateur RH ¬ª.") 
    
    st.markdown("La qualification de chaque candidat est class√©e comme ¬´ Qualifi√© ¬ª ou ¬´ Non qualifi√© ¬ª.") 
    
    st.markdown("Ci-dessous l'√©chantillon de donn√©es :")


    import streamlit as st
    import pandas as pd
    import plotly.express as px

# Sample Data
    data = {
        "ID du candidat": [1, 2, 3, 4, 5],
        "Qualification d'analyste de donn√©es RH": ["Qualifi√©", "Non Qualifi√©", "Qualifi√©", "Non Qualifi√©", "Qualifi√©"],
        "Qualification de coordonnateur RH": ["Non Qualifi√©", "Qualifi√©", "Non Qualifi√©", "Qualifi√©", "Non Qualifi√©"],
    }

    df = pd.DataFrame(data)

# Display the sample data
    st.dataframe(df)


    st.markdown("")

# Rule 1: The Sum Rule
    st.subheader("R√®gle 1 : la r√®gle de la somme")
    st.latex(r"P(A \cup B) = P(A) + P(B) - P(A \cap B)")
    st.markdown(
        """
    La r√®gle de la somme stipule que la probabilit√© que l'un des deux √©v√©nements exclusifs se produise 
    est √©gale √† la somme de leurs probabilit√©s individuelles moins leur probabilit√© conjointe.

    Dans ce contexte, calculons la probabilit√© d'embauche soit pour le poste d'analyste de donn√©es RH, 
    soit pour le poste de Coordonnateur RH.

    - √âv√©nement A : √ätre qualifi√© pour le poste d'analyste de donn√©es RH
    - √âv√©nement B : √ätre qualifi√© pour le poste de coordonnateur RH

    Nous allons calculer P(A), P(B) et P(A et B) et utiliser la formule de la r√®gle de somme pour trouver P(A ou B).
    """
    )

# Calculate P(A): Probability of being Qualified for Data Analyst
    total_data_analyst = df["Qualification d'analyste de donn√©es RH"].count()
    qualified_data_analyst = df[df["Qualification d'analyste de donn√©es RH"] == "Qualifi√©"]["Qualification d'analyste de donn√©es RH"].count()
    p_A = qualified_data_analyst / total_data_analyst

# Calculate P(B): Probability of being Qualified for HR Coordinator
    total_hr_coordinator = df["Qualification de coordonnateur RH"].count()
    qualified_hr_coordinator = df[df["Qualification de coordonnateur RH"] == "Qualifi√©"]["Qualification de coordonnateur RH"].count()
    p_B = qualified_hr_coordinator / total_hr_coordinator

# Calculate P(A and B): Probability of being Qualified for both positions
    qualified_both = df[(df["Qualification d'analyste de donn√©es RH"] == "Qualifi√©") & (df["Qualification de coordonnateur RH"] == "Qualifi√©")]["ID du candidat"].count()
    p_A_and_B = qualified_both / total_data_analyst  # Using the data analyst total for joint probability

# Calculate P(A or B) using the Sum Rule formula
    p_A_or_B = p_A + p_B - p_A_and_B

    st.latex(f"P(A) = {p_A}")
    st.latex(f"P(B) = {p_B}")
    st.latex(f"P(A \cap B) = {p_A_and_B}")
    st.latex(f"P(A \cup B) = {p_A_or_B}")


    st.markdown("")

# Rule 2: The Product Rule
    st.subheader("R√®gle 2 : la r√®gle du produit")
    st.latex(r"P(A \cap B) = P(A) \cdot P(B)")
    st.markdown(
        """
    La r√®gle du produit stipule que la probabilit√© que deux √©v√©nements se produisent tous deux est √©gale au produit de leurs probabilit√©s individuelles.

    Dans ce contexte, calculons la probabilit√© d'embauche √† la fois pour le poste d'analyste de donn√©es RH et pour le poste de Coordonnateur RH.

   - √âv√©nement A : √ätre qualifi√© pour le poste d'analyste de donn√©es RH
   - √âv√©nement B : √ätre qualifi√© pour le poste de coordonnateur RH

    Nous allons calculer P(A) et P(B) et utiliser la formule de la r√®gle du produit pour trouver P(A et B).
    """
    )

# Calculate P(A and B) using the Product Rule formula
    p_A_and_B = p_A * p_B

    st.latex(f"P(A) = {p_A}")
    st.latex(f"P(B) = {p_B}")
    st.latex(f"P(A \cap B) = {p_A_and_B}")

    st.markdown("")

# Rule 3: The Complement Rule
    st.subheader("R√®gle 3 : la r√®gle du compl√©ment")
    st.latex(r"P(\neg A) = 1 - P(A)")
    st.markdown(
        """
    La r√®gle du compl√©ment stipule que la probabilit√© qu‚Äôun √©v√©nement ne se produise pas est √©gale √† un moins la probabilit√© que l‚Äô√©v√©nement se produise.

    Dans ce contexte, calculons la probabilit√© de ne pas √™tre qualifi√© pour le poste d'analyste de donn√©es RH.

    - √âv√©nement A : √ätre qualifi√© pour le poste d'analyste de donn√©es RH

    Nous allons calculer P(A) et utiliser la formule de la r√®gle du compl√©ment pour trouver P(non A).
    """
    )

# Calculate P(not A) using the Complement Rule formula
    p_not_A = 1 - p_A

    st.latex(f"P(A) = {p_A}")
    st.latex(f"P(\neg A) = {p_not_A}")

    
    st.markdown("")
    

if st.button("Continuer vers la suite du Chap.3 - **B/ Distributions de probabilit√© discr√®te**"):
    
    st.subheader("üìàChap.2-B/ Distribution discr√®teüìâ")


    st.markdown("")


    st.markdown("Les distributions de probabilit√© sont des fonctions math√©matiques qui d√©crivent la probabilit√© de diff√©rents r√©sultats dans un processus al√©atoire.") 
    
    st.markdown("Il existe deux principaux types de distributions de probabilit√© : **discr√®te** et **continue**.")
    

    st.markdown("")


    st.markdown("- **Distributions de probabilit√© discr√®te** : Des distributions de probabilit√© discr√®tes sont utilis√©es lorsque la variable al√©atoire ne peut prendre que des valeurs distinctes et s√©par√©es. Cette distribution fournit la probabilit√© de chaque valeur possible de la variable al√©atoire.")

    st.markdown("")
    
    st.markdown("**Distribution de Poisson** : La distribution de Poisson est une distribution de probabilit√© discr√®te, qui mod√©lise le **nombre d'√©v√©nements se produisant dans un intervalle de temps ou d'espace fixe**, √©tant donn√© un taux moyen d'√©v√©nements connu. Elle est **souvent utilis√©e pour analyser des √©v√©nements rares** qui se produisent ind√©pendamment √† un **taux moyen constant**.")

    st.markdown("")

    st.markdown("**Distribution binomiale** : La distribution binomiale est une distribution de probabilit√© discr√®te utilis√©e pour mod√©liser le nombre de r√©ussites dans un nombre fixe d'essais ind√©pendants (essais de Bernoulli), chacun avec la **m√™me probabilit√© de succ√®s (p)**. Elle est caract√©ris√© par deux param√®tres, **n (nombre d'essais) et p (probabilit√© de succ√®s)**.")

    st.markdown("")
    
    st.markdown("- **üèÄApplication 17** :")

    st.markdown("Un charg√© de recrutement de la municipalit√© de Culiacan-l√®s-Marseille doit de suivre le nombre de candidats qui visitent le site web carri√®re de la commune au cours d'une p√©riode donn√©e.") 
    
    st.markdown("Ci-dessous les data collect√©es sur le nombre de visites du site web par heure sur une semaine.")

    st.markdown("")


    import streamlit as st
    import pandas as pd
    import plotly.express as px
    import numpy as np
    from scipy.stats import poisson, binom

# Sample Data
    data = {
        "Heure": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        "Visites": [8, 7, 9, 6, 10, 9, 11, 8, 7, 10],
    }

    df = pd.DataFrame(data)

# Display the sample data
    st.markdown("Echantillon de donn√©es (Visites du site web carri√®re par heure):")
    st.dataframe(df)

# Poisson Distribution
    st.subheader("Distribution de Poisson (Visites site web):")
    st.markdown(
        """
    La distribution de Poisson mod√©lise le nombre d'√©v√©nements se produisant dans un intervalle de temps ou d'espace fixe,
    √©tant donn√© un taux d‚Äô√©v√©nements moyen connu. Dans ce contexte, elle peut √™tre utilis√©e pour pr√©dire le nombre de visites du site web
    carri√®re √† une heure sp√©cifique en fonction du nombre moyen de visites par heure.

    Supposons que le nombre moyen de visites du site Web par heure soit de 8. Nous calculerons les probabilit√©s de Poisson
    pour diff√©rents nombres de visites par heure et en visualiserons la r√©partition.
    """
    )

# Define the average number of visits per hour
    average_visits = 8

# Calculate Poisson probabilities for different values
    x = np.arange(0, 16)  # Number of visits from 0 to 15
    poisson_probs = poisson.pmf(x, average_visits)

# Visualize the Poisson Distribution
    fig_poisson = px.bar(x=x, y=poisson_probs, labels={"x": "Nombre de visites", "y": "Probabilit√©"}, title="Distribution de Poisson ")
    st.plotly_chart(fig_poisson)

# Binomial Distribution
    st.subheader("Distribution Binomiale (Succ√®s des candidats √† un emploi):")
    st.markdown(
        """
    La distribution binomiale mod√©lise le nombre de r√©ussites dans un nombre fixe d'essais ind√©pendants
    (essais de Bernoulli), chacun avec la m√™me probabilit√© de succ√®s (p). En RH, elle peut √™tre utilis√©e pour mod√©liser
    le nombre de candidats retenus sur un nombre fixe d'entretiens (essais) avec un probabilit√© de succ√®s.

    Supposons qu'il y ait 10 candidats √† un emploi et que chacun ait 30 % de chances de succ√®s. Nous calculerons les
    Probabilit√©s binomiales pour diff√©rents nombres de candidats retenus et visualiserons la distribution.
    """
    )

# Define the parameters for the Binomial distribution
    n_applicants = 10  # Number of job applicants
    p_success = 0.3   # Probability of success for each applicant

# Calculate Binomial probabilities for different values
    x_binom = np.arange(0, 11)  # Number of successful applicants from 0 to 10
    binom_probs = binom.pmf(x_binom, n_applicants, p_success)

# Visualize the Binomial Distribution
    fig_binomial = px.bar(x=x_binom, y=binom_probs, labels={"x": "Nombre de candidats retenus", "y": "Probabilit√©"}, title="Distribution Binomiale")
    st.plotly_chart(fig_binomial)

    
    
    st.markdown("")
    
    
    st.markdown("") 
    
    
if st.button("Continuer vers la suite du Chap.3 - **C/ Distributions de probabilit√© continue**"):

    st.subheader("üìàChap.2-B/ Distribution continueüìâ")


    st.markdown("")


    st.markdown("- **Distributions de probabilit√© continues** : Les distributions de probabilit√© continue d√©crivent la probabilit√© de r√©sultats pour des variables al√©atoires continues, qui peuvent prendre un nombre infini de valeurs dans une plage sp√©cifi√©e.")
    
    st.markdown("La distribution continue la plus utilis√©e est la **distribution normale**.")
    
    st.markdown("**La distribution normale**, √©galement connue sous le nom de **distribution gaussienne ou courbe en cloche**, se caract√©rise par sa **courbe sym√©trique en forme de cloche**. Elle est d√©finie par deux param√®tres : la **moyenne** (Œº) et **l'√©cart type** (œÉ). La distribution normale est largement utilis√©e dans divers domaines, y compris RH, en raison de sa capacit√© √† mod√©liser avec pr√©cision de nombreux ph√©nom√®nes du monde r√©el.")

    st.markdown("")
    
    st.markdown("- **üèÄApplication 18** :")

    st.markdown("Le contr√¥leur de gestion sociale d'un service public de *Pluie-l√®s-Brest* a collect√© des donn√©es sur les √©valuations de performance de 100 agents. Il souhaite analyser la r√©partition de ces √©valuations.")

    st.markdown("")


    import pandas as pd
    import numpy as np
    import streamlit as st
    import plotly.express as px

# Sample Data
    data = {
        "Employee ID": range(1, 101),
        "Performance Rating": np.random.normal(70, 10, 100)  # Mean = 70, Standard Deviation = 10
    }

    df = pd.DataFrame(data)

# Streamlit App
    st.title("HR Data Analysis: Normal Distribution")

# Display the sample data
    st.subheader("Sample Data (Performance Ratings):")
    st.dataframe(df)

# Normal Distribution
    st.subheader("Normal Distribution (Performance Ratings):")
    st.markdown(
        """
    The normal distribution, also known as the Gaussian distribution or bell curve, is characterized 
    by its symmetrical bell-shaped curve. It is defined by two parameters: the mean (Œº) and the 
    standard deviation (œÉ). In HR, the normal distribution can be used to model various employee 
    performance metrics.

    In this context, let's assume that the average performance rating in your company is 70, and 
    the standard deviation is 10. We'll calculate the probabilities associated with different 
    performance ratings and visualize the normal distribution.
    """
    )

# Define the mean and standard deviation for the normal distribution
    mean_rating = 70
    std_deviation = 10

# Calculate the probabilities for different performance ratings
    x_values = np.linspace(mean_rating - 3 * std_deviation, mean_rating + 3 * std_deviation, 100)
    pdf_values = (1 / (std_deviation * np.sqrt(2 * np.pi))) * np.exp(-((x_values - mean_rating) ** 2) / (2 * std_deviation ** 2))

# Visualize the Normal Distribution
    fig_normal = px.line(x=x_values, y=pdf_values, labels={"x": "Performance Rating", "y": "Probability Density"}, title="Normal Distribution")
    st.plotly_chart(fig_normal)



    st.markdown("")


    def redirect_button(url: str, text: str= None, color="#FD504D"):
        st.markdown(
        f"""
        <a href="{url}" target="_blank">
            <div style="
                display: inline-block;
                padding: 0.5em 1em;
                color: #FFFFFF;
                background-color: {color};
                border-radius: 3px;
                text-decoration: none;">
                {text}
            </div
        </a>
        """,
        unsafe_allow_html=True
        )
    redirect_button("https://cours-stats-rh.streamlit.app/Quiz_3_-_Probabilit√©s_et_distributionsüìâ","Quiz du chapitre 3")
    

    
    
    
    

            
