#!/usr/bin/env python
# coding: utf-8

# In[ ]:


import streamlit as st

st.sidebar.success("Cliquez sur un :blue[chapitre] ou un :blue[quiz]")

import pandas as pd

st.markdown("# Chapitre 1")
st.sidebar.markdown("# Chapitre 1")

st.title("Introduction aux statistiques")

st.markdown("**Les statistiques** sont une branche des math√©matiques qui **traitent de la collecte, de l'analyse, de l'interpr√©tation, de la pr√©sentation et de l'organisation des donn√©es**. Deux grandes branches des statistiques sont les **statistiques descriptives** et les **statistiques inf√©rentielles**.")

st.markdown("")

if st.button("Cliquez pour acceder au Chap.1 - **A/ Statistiques descriptives vs inf√©rentielles**"):
    st.subheader("üìàChap.1-A/ Statistiques descriptives vs inf√©rentiellesüìâ")
    
    st.markdown("- Les **statistiques descriptives traitent de la collecte, de l'analyse et de la pr√©sentation des donn√©es**. Elles comprennent le **calcul des mesures de tendance centrale** telles que la **moyenne**, la **m√©diane** et le **mode**. Ainsi que des **mesures de variabilit√©** telle que la **gamme** ou **l'√©cart-type** pour **d√©crire et r√©sumer les donn√©es**.")
    
    st.markdown("- Les **statistiques inf√©rentielles**, quant √† elles, **consistent √† tirer des inf√©rences ou des conclusions sur une population √† partir d'un √©chantillon de donn√©es**. Ils comprennent **l'estimation des param√®tres de la population et des tests d'hypoth√®ses pour √©valuer la validit√© des affirmations statistiques**.")
# Add the "made with ‚ù§Ô∏è by ..." text in the sidebar
with st.sidebar:
    st.write("Made with ‚ù§Ô∏è by Chris MUBA")
with st.sidebar:
        st.image('GIF/GIF_Chap1B.gif')

if st.button("Continuer vers la suite du Chap.1 - **B/ Types de donn√©es et sources de donn√©es**"):
    
    st.subheader("üìàChap.1-B/ Types de donn√©es et sources de donn√©esüìâ")
    
    st.markdown("En GRH les donn√©es jouent un r√¥le crucial dans la prise de d√©cision. Les donn√©es peuvent √™tre class√©es en deux types principaux : **cat√©gorielles** et **num√©riques**.")

    st.markdown("")
    
    st.markdown("**A/ Les donn√©es cat√©gorielles** (ou donn√©es qualitatives)")
                
    st.markdown("Les donn√©es **cat√©gorielles** sont des donn√©es qui peuvent √™tre **tri√©es en cat√©gories ou en groupes**.") 
    
    st.write("Ces cat√©gories sont non num√©riques et peuvent √™tre **nominales** ou **ordinales** :")

    st.markdown(" - 1/ Les donn√©es **cat√©gorielles nominales**")

    st.markdown("Les donn√©es cat√©gorielles nominales font r√©f√©rence √† des **cat√©gories qui ne peuvent pas √™tre mesur√©es, compt√©es, class√©es ou ordonn√©es**. Ce type de donn√©es sont souvent descriptives et sont utilis√©es pour pr√©senter des caract√©ristiques ou des propri√©t√©s qui ne peuvent pas √™tre quantifi√©es.")

    st.markdown("")
### Affichage tableau au format tabulaire    
    
    st.markdown("üö®**Tableau 1** : Exemple de donn√©es **cat√©gorielles nominales**")
    
    data_1 = [
        ["Femme", "Leadership", "CDI", "Rupture conventionnelle", "Comptabilit√©-Finances"],
        ["Homme", "Communication", "CDD", "fin de CDD", "Marketing-Ventes"],
        ["Femme", "R√©solution de probl√®mes", "Contrat de travail temporaire (int√©rim)", "Fin de mission", "RH"],
        ["Homme", "Cr√©ativit√©", "Contrat d\'apprentissage", "D√©mission", "Informatique"],
        ["Homme", "Travail d\'√©quipe", "Contrat de professionnalisation", "Fin de p√©riode d‚Äôessai", "Administration g√©n√©rale"],
        ["...", "...", "...", "...", "..."]
]

    headers = ["Genre H/F", "Qualit√©s professionnelles", "Type de contrat de travail", "Motif de fin de contrat", "Service"]

    df = pd.DataFrame(data_1, columns=headers)

    st.table(df)
#####
    st.markdown(" - 2/ Les donn√©es **cat√©gorielles ordinales**")

    st.markdown("Les donn√©es cat√©gorielles ordinales impliquent des **cat√©gories bas√©es sur des caract√©ristiques qui peuvent traduire une chronologie, un classement, une √©chelle. ; Souvent elles peuvent √™tre compt√©es** par des valeurs discr√®tes.")

    ### Affichage tableau au format tabulaire    
    
    st.markdown("üö®**Tableau 2** : Exemple de donn√©es **cat√©gorielles ordinales**")
    
    data = [
        ["18 - 24", "0 √† 2 ans", "Employ√©","BTS / Titre pro"],
        ["25 - 34", "3 √† 5 ans", "Agent de ma√Ætrise", "Bachelor"],
        ["35 - 44", "6 √† 10 ans", "Cadre", "Master"],
        ["45 - 54", "11 √† 15 ans", "Cadre sup.", "Master"],
        ["55 et plus", "plus de 15 ans", "Cadre sup.", "BTS / Titre pro"],
        ["...", "...", "...", "..."]
]

    headers = ["Tranche d'√¢ge des employ√©s","Anciennet√©", "Cat√©gorie de l'emploi", "Dipl√¥me"]

    df = pd.DataFrame(data, columns=headers)

    st.table(df)

    
    st.markdown("")
    
    
    st.markdown("‚ö†Ô∏èBien que non num√©riques les donn√©es **cat√©gorielles**, aussi appel√©es donn√©es **qualitatives**, peuvent √™tre **quantifi√©es** ou d√©crites √† l'aide de m√©thodes num√©riques :") 
    
    st.markdown(" üå∂Ô∏è calculs de fr√©quences, pourcentages, tests du khi-deux, pour r√©sumer et analyser ce type de donn√©es ;") 
    
    st.markdown(" üå∂Ô∏è l'analyse de clustering ou l'analyse factorielle pour identifier des mod√®les et des relations dans ces donn√©es.")  
    
    st.markdown("") 
    
    st.markdown("") 
#####
    st.markdown("**3/ Visualisation des donn√©es cat√©gorielles**")
    
    st.markdown("Les donn√©es cat√©gorielles sont souvent pr√©sent√©es sous forme de *graphique en barres*üìä ou de *diagramme circulaire*ü•ß ( ¬´ camembert ¬ª). Par exemple si nous reprenons notre **Tableau 1**, nous pouvons tracer un diagramme circulaire √† partir de donn√©es cat√©gorielles nominales : ici les donn√©es de la colonne **Genre H/F**.")


    import streamlit as st
    import plotly.graph_objects as go

    data = ["Femme", "Homme", "Femme", "Homme", "Homme"]
    colors = ['#e377c2', '#1f77b4']

    def plot_pie_chart(data, colors, title):
        gender_counts = {gender: data.count(gender) for gender in set(data)}
        labels = list(gender_counts.keys())
        values = list(gender_counts.values())

        fig = go.Figure(data=[go.Pie(labels=labels, values=values, marker=dict(colors=colors))])
        fig.update_layout(title=title)
        st.plotly_chart(fig)

    plot_pie_chart(data, colors, "DataViz : Genre H/F - Tableau 1")

    st.markdown("")
    
    st.markdown("") 
       
    st.markdown("")   
    
    st.markdown("") 
#####
    st.markdown("**B/ Les donn√©es quantitatives**")
    
    st.markdown("Les donn√©es **quantitatives** sont des donn√©es qui peuvent √™tre **mesur√©es** ou **compt√©es**. Ces donn√©es peuvent ensuite √™tre class√©es en donn√©es **discr√®tes** ou **continues**.") 

    st.markdown("") 
#####
    st.markdown(" - 1/ Les donn√©es **quantitatives discr√®tes**")
    
    st.markdown("Les donn√©es **quantitatives discr√®tes** sont des donn√©es qui ne peuvent prendre que des valeurs enti√®res, c'est √† dire sans virgule. Les donn√©es discr√®tes sont souvent repr√©sent√©es √† l'aide de chiffres entiers ou de nombres entiers.")

    st.markdown("") 

    
    import streamlit as st
    import plotly.express as px
    import pandas as pd

# Sample HR dataset
    data = {
        'Effectif du service': ['Ventes : 12', 'Finance : 5', 'RH : 5', 'IT : 3', 'Marketing : 8', 'Operations : 21'],
        'Nombre d\'√©valuations de performances': ['9', '4', '4', '1', '3', '8'],
        'Candidatures re√ßues': ['6', '3', '3', '2', '4', '11'],
        'Effectifs recrut√©s': ['2', '1', '1', '0', '1', '4']
}

# Affichage tableau au format tabulaire   
    st.markdown("üö®**Tableau 3** : Exemple de donn√©es **quantitatives discr√®tes**")
    df = pd.DataFrame(data)
    st.write(df)

    
    st.markdown("")
#####
    st.markdown(" - 2/ Les donn√©es **quantitatives continues**")
    
    st.markdown("Les donn√©es **quantitatives continues**, quant √† elles, font r√©f√©rence √† sont des donn√©es qui peuvent prendre n'importe quelle valeur dans une certaine plage.") 
    st.markdown("Il n'y a pas d'intervalles ni de ruptures entre les valeurs de donn√©es continues et il existe un nombre infini de valeurs possibles qui peuvent √™tre prises ; m√™me si par convention on admet seulement un certain nombre de chiffres apr√®s la virgule.")

    st.markdown("")
    
### Affichage tableau au format tabulaire    
    
    st.markdown("üö®**Tableau 4** : Exemple de donn√©es **quantitatives continues**")    
    
    data_2 = [
        [32, 50.5, 5.5, 7.5],
        [43.5, 72.3, 12.25, 7.25],
        [35.5, 40.1, 7.5, 7.1],
        [41, 65.9, 12, 8.9],
        [39, 58, 6.5, 7.8]
    ]

    headers_2 = ["√Çge", "Salaire annuel (k‚Ç¨)", "Anciennet√©", "Note de performance"]

    df_2 = pd.DataFrame(data_2, columns=headers_2)
    
# Formater les colonnes pour afficher 2 chiffres apr√®s la virgule : "√Çge", "Salaire annuel (k‚Ç¨)", "Anciennet√©", "Note de performance"
    
    df_2["√Çge"] = df_2["√Çge"].map(lambda x: "{:.1f}".format(x))
    df_2["Salaire annuel (k‚Ç¨)"] = df_2["Salaire annuel (k‚Ç¨)"].map(lambda x: "{:.1f}".format(x))
    df_2["Anciennet√©"] = df_2["Anciennet√©"].map(lambda x: "{:.2f}".format(x))
    df_2["Note de performance"] = df_2["Note de performance"].map(lambda x: "{:.2f}".format(x))

    st.table(df_2)

    st.markdown("") 
    
    st.markdown("") 
#####
    st.markdown("**3/ Visualisation des donn√©es quantitatives**")
        
    st.markdown("")
    
    st.markdown("Les donn√©es **quantitatives** sont souvent pr√©sent√©es sous forme **d'histogrammes**, de **bo√Ætes √† moustaches**, de **graphiques lin√©aires** ou de **nuages de points**. Par exemple si nous reprenons notre **Tableau 4**, nous pouvons tracer un nuages de point avec droite de r√©gression √† partir de donn√©es quantitatives continues : ici les donn√©es des colonnes **√Çge** et **Note de performance**.")
   
    
    st.markdown("")     
        
    import streamlit as st
    import plotly.express as px
    import pandas as pd
    import numpy as np

    data_2 = [
        [32, 50.5, 5.5, 7.5],
        [43.5, 72.3, 12.25, 7.25],
        [35.5, 40.1, 7.5, 7.1],
        [41, 65.9, 12, 8.9],
        [39, 58, 6.5, 7.8]
    ]

    headers_2 = ["√Çge", "Salaire annuel (k‚Ç¨)", "Anciennet√©", "Note de performance"]

    df_2 = pd.DataFrame(data_2, columns=headers_2)

# Scatter plot: Age vs. Performance Rating with correlation line
    
    correlation_coefficient = np.corrcoef(df_2['√Çge'], df_2['Note de performance'])[0, 1]
    fig_scatter = px.scatter(df_2, x='√Çge', y='Note de performance', title='DataViz : Relation entre l\'√¢ge et la performance au travail - Tableau 4')
    fig_scatter.add_trace(px.scatter(x=df_2['√Çge'], y=df_2['Note de performance']).data[0])
    fig_scatter.add_trace(px.line(x=df_2['√Çge'], y=np.polyval(np.polyfit(df_2['√Çge'], df_2['Note de performance'], 1), df_2['√Çge'])).data[0])
    fig_scatter.update_layout(annotations=[dict(x=35, y=3.2, text=f'Correlation: {correlation_coefficient:.2f}', showarrow=False)])
    st.plotly_chart(fig_scatter)

    
    st.markdown("")

    st.markdown("**C/ Les sources des donn√©es**")

    st.markdown("")


    st.markdown("Les donn√©es peuvent √™tre collect√©es √† partir de diverses sources, telles que :")

    st.markdown("- le syst√®me d'information de gestion des ressources humaines (**SIRH**)")
    
    st.markdown("- les **dossiers du personnel** en **version papier** et / **ou digitale** (d√©mat√©rialis√©e).")

    st.markdown("")

    # Afficher les images

    from PIL import Image
    col1, col2 = st.columns(2)

    with col1:
       st.markdown("dossiers du personnel")
       image = Image.open('GIF/dossiers_du personnel_giphy.gif')
    # Display a GIF
       st.image('GIF/dossiers_du personnel_giphy.gif')

    with col2:
       st.markdown("quelques SIRH")
       image = Image.open('GIF/photos_sirh.jpg')
       st.image(image)

    
    
    st.markdown("")


    st.markdown("‚ö†Ô∏èLe droit du travail ne pr√©voit aucune information obligatoire √† renseigner sur un salari√©, en revanche les informations recueillies doivent pr√©senter un lien direct et n√©cessaire avec l'emploi propos√© ou avec l'√©valuation des aptitudes professionnelles (**Art. L1221-6 du CT**)")

    
    st.markdown("")


    st.markdown("‚ö†Ô∏èPour certains agents de la fonction publique de l'√âtat, la liste des donn√©es √† recueillir par les RH est pr√©cis√©e dans l'annexe du **d√©cret n¬∞ 2019-612 du 19 juin 2019** portant cr√©ation d'un traitement automatis√© de donn√©es √† caract√®re personnel (**RenoiRH**)")

                
    st.markdown("")


    st.markdown("üö®Un **SIRH** est un syst√®me logiciel qui g√®re des donn√©es RH. Il peut fournir une **base de donn√©es centralis√©e** pour les informations sur les employ√©s, y compris les informations personnelles, l'historique professionnel, etc...") 

   
    st.markdown("Le SIRH peut √©galement fournir des outils d‚Äôanalyse des donn√©es et de reporting : c'est une excellente source de donn√©es cat√©gorielles et num√©riques.")
    

    st.markdown("")


    st.markdown("Bien que les dossiers des employ√©s constituent une source pr√©cieuse de donn√©es RH, un SIRH offre plusieurs avantages par rapport aux dossiers traditionnels.") 
    
    st.markdown("Le SIRH fournit une base de donn√©es centralis√©e accessible simultan√©ment √† plusieurs utilisateurs, ce qui facilite le partage d'informations entre les utilisateurs autoris√©s.") 
    
    st.markdown("Le SIRH fournit √©galement des donn√©es RH en temps r√©el, permettant de prendre rapidement des d√©cisions √©clair√©es.") 
    
    st.markdown("Un autre avantage du SIRH est qu‚Äôil peut automatiser de nombreux processus RH, ce qui peut permettre de gagner du temps et de r√©duire les erreurs, am√©liorant ainsi l'efficacit√© globale d'un service RH.")

    st.markdown("")

    st.markdown("")


    
if st.button("Continuer vers la suite du Chap.1 - **C/ R√¥le des statistiques dans les RH**"):
    
    st.subheader("üìàChap.1-C/ R√¥le des statistiques dans les RHüìâ")
    
    st.markdown("**Le r√¥le principal des statistiques appliqu√©es aux RH est d'aider professionnels RH √† prendre des d√©cisions √©clair√©es, bas√©es sur des donn√©es pertinentes**.") 
    
    st.markdown("Pour y arriver ils peuvent : ") 
                
    st.markdown("- **Cr√©er des indicateurs** : concernant par exemple le **suivi des effectifs**, la **pyramide des √¢ges**, la **pyramide des anciennet√©s**, le **suivi de la masse salariale**, le **suivi du turn-over**, le **suivi de l'absent√©isme**, la **qualit√© du recrutement**, le **climat interne**, etc...") 

    st.markdown("*üìåLes possibilit√©s de cr√©ation d'indicateurs RH sont nombreuses et d√©pendent des objectifs suivis par l'entreprise et des donn√©es √† disposition.*")

    st.markdown("")

    st.markdown("- **Cr√©er des tableaux de bord** : apr√®s avoir d√©fini les indicateurs RH √† suivre et collect√© les donn√©es appropri√©es, nous pouvons cr√©er un tableau de bord automatis√© qui rassemblera et facilitera le suivi en temps r√©el de nos indicateurs.")

    st.markdown("üìå*Les outils pour cr√©er des tableaux de bords RH sont nombreux : parmi les solutions ¬´ presse-bouton ¬ª mais peu flexibles certaines bien rod√©es sont Power BI, Tableau, Qlik ou Looker Studio ; en revanche si on sait √©crire du code, les possibilit√©s sont presque sans limites avec Streamlit (framework Pythonüêç), Flexdashboard (framework R), Shiny (R / Pythonüêç), etc... .*")


    st.markdown("")


    st.markdown("Ci-dessous un :blue[exemple de **tableau de bord RH**] √† 4 onglets :") 
    
    st.markdown("- Suivi de la masse salariale") 
    st.markdown("- Pyramide des √¢ges") 
    st.markdown("- R√©partition H/F")
    st.markdown("- Salaire moyen H/F")

    import streamlit as st
    import pandas as pd
    import numpy as np
    import plotly.graph_objs as go
    import plotly.express as px
   

# Line Plot
    # Monthly payroll data (in thousands of dollars)
    forecast_months_2023 = ['janvier', 'f√©vrier', 'mars', 'avril', 'mai', 'juin', 'juillet', 'ao√ªt', 'septembre', 'octobre', 'novembre', 'd√©cembre']
    r√©alis√©_months_2023 = ['janvier', 'f√©vrier', 'mars', 'avril', 'mai', 'juin', 'juillet', 'ao√ªt']

    forecast_2023 = [1154300, 1200010, 1235205, 1305008, 1778120, 1263150, 1208180, 1240000, 1275002, 1299250, 2356280, 1251300]
    r√©alis√©_2023 = [1152003, 1185350, 1113880, 1205008, 1677420, 1121245, 1148000, 1165000]

# Create a dataframe for plotting
    df = pd.DataFrame({'mois': forecast_months_2023 + r√©alis√©_months_2023,
                       'forecast 2023 (pr√©vision)': forecast_2023 + [None] * len(r√©alis√©_months_2023),
                       'r√©alis√© 2023': [None] * len(forecast_months_2023) + r√©alis√©_2023})

# Create an interactive line plot
    fig_1 = px.line(df, x='mois', y=['forecast 2023 (pr√©vision)', 'r√©alis√© 2023'],
                    labels={'value': 'masse salariale brute (millions ‚Ç¨)'},
                    title='suivi de la masse salariale (pr√©vision 2023 vs. r√©alis√© 2023)')

# Customize line colors
    fig_1.update_traces(line_color='red', selector=dict(name='forecast 2023 (pr√©vision)'))
    fig_1.update_traces(line_color='blue', selector=dict(name='r√©alis√© 2023'))

# Display the line plot
  #st.plotly_chart(fig_1)
    

    st.markdown("")


# Age Pyramid
# Define age intervals
    age_intervals = ['[ < 25]', '[25 - 29]', '[30 - 34]', '[35 - 39]', '[40 - 44]', '[45 - 49]', '[50 - 54]', '[55 - 59]', '[60 et +]']

# Corresponding y values for the intervals
    y = list(range(len(age_intervals)))

    women_bins = np.array([-1686, -3868, -3463, -2346, -2074, -3037, -3495, -4194, -228])
    men_bins = np.array([887, 2013, 2323, 1842, 1645, 2270, 3115, 3891, 493])

    layout = go.Layout(
    title='Pyramide des √¢ges en pelote de laine',
    yaxis=go.layout.YAxis(title='√Çge', tickvals=y, ticktext=age_intervals),
    xaxis=go.layout.XAxis(
        range=[-5000, 5000],
        tickvals=[-4000, -2000, 0, 2000, 4000],
        ticktext=[4000, 2000, 0, 2000, 4000],
        title='Effectif'
    ),
    barmode='overlay',
    bargap=0.1
)

    data = [
    go.Bar(
        y=y,
        x=men_bins,
        orientation='h',
        name='üë¶üèø Homme',
        hoverinfo='x',
        marker=dict(color='#1f77b4')
    ),
    go.Bar(
        y=y,
        x=women_bins,
        orientation='h',
        name='üë©‚Äçü¶∞ Femme',
        text=-1 * women_bins.astype('int'),
        hoverinfo='text',
        marker=dict(color='#e377c2')
    )
]

    fig_2 = go.Figure(data=data, layout=layout)
    
    #st.plotly_chart(fig_2)


    st.markdown("")
    

# Pie Chart
    # R√©partition üë¶üèø/üë©‚Äçü¶∞

    data = ["femme", "homme", "femme", "homme", "homme"]
    colors = ['#e377c2', '#1f77b4']

    def fig_3(data, colors, title):
        gender_counts = {gender: data.count(gender) for gender in set(data)}
        labels = list(gender_counts.keys())
        values = list(gender_counts.values())

        fig_3 = go.Figure(data=[go.Pie(labels=labels, values=values, marker=dict(colors=colors))])
        fig_3.update_layout(title=title)
        return fig_3

    fig_3 = fig_3(data, colors, "R√©partition H/F")
    #st.plotly_chart(fig_3)


# Bar Chart
    # Sample dataset
    data = {
    'Employee ID': ['001', '002', '003', '004', '005', '006', '007', '008', '009', '010'],
    'Genre': ['Hommeüë¶üèæ', 'Femmeüëß', 'Hommeüë¶üèæ', 'Femmeüëß', 'Hommeüë¶üèæ', 'Hommeüë¶üèæ', 'Femmeüëß', 'Femmeüëß', 'Hommeüë¶üèæ', 'Femmeüëß'],
    'Salaire ‚Ç¨': [55000, 60000, 65000, 58000, 70000, 62000, 56000, 59000, 75000, 61000]
    }

    df = pd.DataFrame(data)

    # Average salary by gender
    #st.markdown('**fig.2: Salaire moyen selon le genre**')
    avg_salary = df.groupby('Genre')['Salaire ‚Ç¨'].mean().reset_index()

    fig_4 = px.bar(avg_salary, x='Genre', y='Salaire ‚Ç¨', title='Comparaison du salaire moyen entre H/F', color='Genre',
                     color_discrete_map={'Hommeüë¶üèæ': '#1f77b4', 'Femmeüëß': '#e377c2'})
    #st.plotly_chart(fig_4)

    st.markdown("")


    st.markdown("")
    
    
    # Create the tabs
    tabs = st.tabs(["Suivi de la masse salariale", "Pyramide des √¢ges", "R√©partition H/F", "Salaire moyen H/F"])

# Tab 1 - Line Chart
    with tabs[0]:
        #st.write("## Line Chart")
        st.plotly_chart(fig_1)

# Tab 2 - Histogram
    with tabs[1]:
        #st.write("## Histogram")
        st.plotly_chart(fig_2)

# Tab 3 - Pie Chart
    with tabs[2]:
        #st.write("## Pie Chart")
        st.plotly_chart(fig_3)

# Tab 4 - Bar Chart
    with tabs[3]:
        #st.write("## Bar Chart")
        st.plotly_chart(fig_4)

    
    st.markdown("")


    st.markdown("")
    

    st.markdown("- **Remplir les obligations l√©gales** : notamment construire le **bilan social**, pr√©parer et mettre √† dsposition les **donn√©es necessaires √† la n√©gociation annuelle obligatoire** (NAO) ; ") 
    
    st.markdown("- Calculer l'**index √©galit√©** H/F ; effectuer la **d√©claration annuelle obligatoire d‚Äôemploi des travailleurs handicap√©s** (DOETH), etc...") 
    
    st.markdown("üöÄ**Tous ces √©l√©ments sont bas√©s sur la collecte et l'analyse de donn√©es sociales, et requi√®rent donc une excellente compr√©hension des concepts et m√©thodes statistiques**.üöÄ")


    st.markdown("")
    
    
    st.markdown("Les statistiques appliqu√©es aux RH permettent aussi la **r√©alisation d'√©tudes ponctuelles**, sur des sujets pr√©cis, pouvant conduire √† la mise en place de diverses actions correctives.")
    

    st.markdown("")


    st.markdown("")


    st.markdown("**üèÄApplication 1**")

    st.markdown("Nous menons une √©tude dans laquelle nous souhaitons comparer le nombre de jours d'absence au sein de diff√©rents services sur une p√©riode donn√©e ; et ainsi d√©celer d'√©ventuels probl√®mes de climat social au sein de certaines √©quipes.")
    
    st.markdown("Ci-dessous un √©chantillon donn√©es : ")
    

    import streamlit as st
    import pandas as pd
    import plotly.express as px
    import plotly.graph_objects as go
    import statsmodels.api as sm
    from statsmodels.formula.api import ols
    from statsmodels.stats.multicomp import pairwise_tukeyhsd

     # Sample dataset
    data = pd.read_csv('csv_files/employee_absence_data.csv')

    # Remove leading/trailing spaces from column names
    data.columns = data.columns.str.strip()

    st.markdown("**Tableau de suivi des absences des employ√©s**")

# Display the data
    st.write(data)

    st.markdown("")

    st.markdown("Nous visualisons la r√©partition des jours d'absence √† l'aide de Box Plot, qui montrent des variations d'absence selon les diff√©rents services.")

    
    fig = px.box(data, x='Department', y='Days_of_Absence', title='Box Plot : Jours d\'absence par service')
    st.plotly_chart(fig)


    # Explanation
    with st.expander("üîÆInterpretation"):
        st.write("""
        **Tableau ANOVA** : La statistique F (F) est d'environ 4.8257 et la p-value (PR(>F)) associ√©e est de 0.011, ce qui est inf√©rieur au seuil typique de significativit√© de *0.05*.
        **Cela indique qu‚Äôil existe une diff√©rence statistiquement significative dans les jours d‚Äôabsence entre au moins certains services**.

        ‚ö†Ô∏è Dans notre cas il faut compl√©ter l'analyse √† l'aide d'un **test HSD de Tukey** pour identifier quelles paires de services sp√©cifiques ont des jours d'absence moyens significativement diff√©rents,
        ce qui permettra d'orientier de fa√ßon efficiente la mise en place d'actions correctives.

        """)

    st.markdown("")

    anova_model = ols('Days_of_Absence ~ Department', data=data).fit()
    anova_table = sm.stats.anova_lm(anova_model, typ=2)

    st.markdown("Nous effectuons un test d'ANOVA unidirectionnel pour v√©rifier s'il existe des diff√©rences significatives dans les jours d'absence entre les d√©partements. Si la valeur p est inf√©rieure √† 0.05, on peut conclure qu‚Äôau moins un service est significativement diff√©rent des autres.")
    
    st.write("Table d\'ANOVA:")
    st.write(anova_table)

    st.markdown("")

    st.markdown("")

    st.markdown("üìå *Les possibilit√©s de sujets d'√©tudes statistiques sont tr√®s nombreuses en RH et d√©pendent des probl√©matiques et objectifs propres √† chaque entreprises* :")

    st.markdown("1. :blue[**Engagement des employ√©s** :] Mesurer et analyser les niveaux d'engagement des employ√©s peut aider les entreprises √† identifier les domaines dans lesquels elles peuvent **am√©liorer la satisfaction et la productivit√© des employ√©s**.")

    st.markdown("2. :blue[**Acquisition de talents** :] Aider les entreprises √† comprendre leur processus d'embauche et √† identifier les domaines dans lesquels il peut √™tre am√©lior√©. Cela peut inclure des √©tudes sur l'efficacit√© des diff√©rents canaux de recrutement, le temps qu'il faut pour embaucher pour diff√©rents postes, le co√ªt de l'embauche de nouveaux employ√©s, etc...")
                
    st.markdown("3. :blue[**Fid√©lisation des employ√©s** :] Aider les entreprises √† comprendre pourquoi les employ√©s quittent leur emploi et √† **identifier des moyens pour r√©duire le turnover**. Cela peut inclure des √©tudes sur les diff√©rentes raisons de d√©part, **le co√ªt du turnover, l'impact du turnover sur les r√©sultats financiers de l'entreprise**, etc...")

    st.markdown("4. :blue[**R√©mun√©ration et avantages sociaux** :] S'assurer que les entreprises offrent des packages de r√©mun√©ration et avantages sociaux comp√©titifs. Cela peut inclure des √©tudes sur les salaires et les avantages sociaux du march√©, la satisfaction des employ√©s √† l'√©gard de la r√©mun√©ration et des avantages sociaux, et **l'impact de la r√©mun√©ration et des avantages sociaux sur la fid√©lisation des employ√©s**, etc...")

    st.markdown("5. :blue[**Formation et d√©veloppement des comp√©tences** :] Aider les entreprises √† √©valuer l'efficacit√© de leurs programmes de formation et de d√©veloppement des comp√©tences. Cela peut inclure des √©tudes sur la satisfaction des employ√©s √† l'√©gard des programmes de formation et de d√©veloppement des comp√©tences, **l'impact de ces programmes sur les performances des employ√©s et le retour sur investissement des programmes de formation et de d√©veloppement**.")

    st.markdown("6. :blue[**Commentaires et communication des employ√©s** :] Examiner l'efficacit√© des canaux de r√©troaction et de communication au sein de l'entreprise et identifier les opportunit√©s d'am√©lioration en favorisant un environnement de travail transparent et collaboratif.")

    st.markdown("7. :blue[etc...]")

    st.markdown("")

    st.markdown("Ce ne sont l√† que quelques exemples d‚Äô√©tudes RH qui peuvent √™tre men√©es en entreprise. Les √©tudes sp√©cifiques les plus pertinentes d√©pendront des besoins de l‚Äôentreprise.")

    st.markdown("")

    #url = "https://cours-stats-rh.streamlit.app/Quiz_1_-_Introduction_aux_Statistiquesüìâ"
    #st.write("Acceder au quiz du chapitre 1 [ici](%s)" % url)

    def redirect_button(url: str, text: str= None, color="#FD504D"):
        st.markdown(
        f"""
        <a href="{url}" target="_blank">
            <div style="
                display: inline-block;
                padding: 0.5em 1em;
                color: #FFFFFF;
                background-color: {color};
                border-radius: 3px;
                text-decoration: none;">
                {text}
            </div
        </a>
        """,
        unsafe_allow_html=True
        )
    redirect_button("https://cours-stats-rh.streamlit.app/Quiz_1_-_Introduction_aux_Statistiquesüìâ","Quiz du chapitre 1")


                
    



    
   




    



    



