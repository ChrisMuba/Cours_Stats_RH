


import streamlit as st

st.markdown("# Chapitre 2")
st.sidebar.markdown("# Chapitre 2")

st.title("Statistiques descriptives")

st.markdown("Comme nous l'avons pr√©c√©demment vu, **les statistiques descriptives traitent de la collecte, de l'analyse et de la pr√©sentation des donn√©es**.") 
st.markdown("Elles vont fournir aux professionnels RH des outils pour d√©crire et r√©sumer les donn√©es d'une mani√®re facile √† comprendre.")

if st.button("Cliquez pour acceder au Chap.2 - **A/ Mesures de tendance centrale**"):
    
    st.subheader("üìàChap.2-A/ Mesures de tendance centraleüìâ")
    
    st.markdown("Les **mesures de tendance centrale** sont utilis√©es pour d√©finir le centre d'une distribution ou d'un ensemble de donn√©es.") 
    st.markdown("En statistique, une **distribution** fait r√©f√©rence au mod√®le de variation dans un ensemble de donn√©es num√©riques.") 
    st.markdown("Ce mod√®le de variation d√©crit comment les donn√©es sont r√©parties sur une plage de valeurs. On peut visualiser une distribution √† l'aide d'un graphique, tel qu'un histogramme ou un box plot.")
    
    st.markdown("**Il existe trois principales mesures de tendance centrale** :")
    
    st.markdown("- **Moyenne** : il s'agit de la moyenne arithm√©tique d'un ensemble de valeurs. Elle est calcul√©e en additionnant toutes les valeurs et en divisant par le nombre de valeurs.") 
    st.markdown("La moyenne est sensible aux valeurs aberrantes et aux valeurs extr√™mes, et peut ne pas √™tre repr√©sentative des donn√©es s'il existe des valeurs extr√™mes.")


    import streamlit as st
    import plotly.express as px
    import pandas as pd
    import numpy as np

# Sample employee salary data (in thousands of dollars)
    salaires = [55000, 60000, 65000, 58000, 70000, 62000, 56000, 59000, 75000, 61000] 

# Create a DataFrame
    df = pd.DataFrame({'Salaire (en milliers ‚Ç¨)': salaires})

# Calculate the mean
    mean_salary = np.mean(df['Salaire (en milliers ‚Ç¨)'])

# Display the theoretical formula for calculating the mean
    st.subheader("Formule th√©orique de la moyenne")
    st.latex(r'\text{Moyenne} = \frac{\sum_{i=1}^{n}X_i}{n}')


    st.markdown("")


    st.markdown("**üèÄApplication 1**")
    st.markdown("**Salaires (‚Ç¨) : [55000, 60000, 65000, 58000, 70000, 62000, 56000, 59000, 75000, 61000]**")

    

# Display the steps for calculating the mean
    st.subheader("√âtapes pour calculer la moyenne")
    st.markdown(
    """
    1. **Sommez toutes les valeurs:** additionnez toutes les valeurs de salaire dans l‚Äôensemble de donn√©es.
    2. **Comptez le nombre de valeurs (n) :** d√©terminez le nombre total de salaires dans l'ensemble de donn√©es.
    3. **Appliquez la formule:** Divisez la somme par le nombre de valeurs pour obtenir la moyenne.
    """
)

# Display the calculated mean
    st.write(f"**üí°Salaire moyen: {mean_salary:.2f} (en ‚Ç¨)**")

# Create a histogram
    fig_hist = px.histogram(df, x='Salaire (en milliers ‚Ç¨)', title='Histogramme de la distribution des salaires')

# Display the histogram
    st.plotly_chart(fig_hist)
    

    st.markdown("")


    st.markdown("**üîÆInterpretation de l'histogramme de la distribution des salaires**")


    st.markdown("L'histogramme de r√©partition des salaires repr√©sente la **fr√©quence des diff√©rentes √©chelles** de salaire au sein de l'ensemble de donn√©es.")

    st.markdown("La plupart des salaires se situent dans la fourchette de **55 000 ‚Ç¨ √† 65 000 ‚Ç¨**, cette cat√©gorie ayant la fr√©quence la plus √©lev√©e.")

    st.markdown("Il n'y a pas de salaires inf√©rieurs √† 55 000 ‚Ç¨ ou sup√©rieurs √† 75 000 dans cet ensemble de donn√©es.")

    st.markdown("La r√©partition est **l√©g√®rement asym√©trique vers la gauche**, ce qui indique qu'il y a relativement plus d'employ√©s dont le salaire est inf√©rieur au salaire m√©dian (environ 60 500 ‚Ç¨).")


    st.markdown("")


    st.markdown("")

    
    st.markdown("- **M√©diane** : la valeur m√©diane est le point milieu d'un ensemble de donn√©es num√©riques. Elle est calcul√©e en organisant les donn√©es dans l'ordre croissant, de sorte que la moiti√© des valeurs soient inf√©rieures ou √©gales √† la m√©diane et l'autre moiti√© sup√©rieures ou √©gales. Ainsi la m√©diane se trouve √™tre le point milieu.") 
    st.markdown("Comparativement √† la moyenne, la m√©diane est moins sensible aux valeurs aberrantes ou extr√™mes ; et fournit une meilleure repr√©sentation de la‚ö°**valeur typique**‚ö°de l'ensemble de donn√©es.") 



    import streamlit as st
    import pandas as pd

# Sample employee salary data (in dollars)
    salaries = [55000, 60000, 65000, 58000, 70000, 62000, 56000, 59000, 75000, 61000]


# Display the theoretical formula for calculating the median
    st.subheader("Formule th√©orique de la mediane")
    st.latex(r'\text{Mediane} = \frac{N+1}{2}^{√®me}\ \text{valeur dans les donn√©es class√©es par ordre croissant}')

    st.markdown("")


    st.markdown("**üèÄApplication 2**")
    st.markdown("**Salaires (‚Ç¨) : [55000, 60000, 65000, 58000, 70000, 62000, 56000, 59000, 75000, 61000]**")

# Display the steps for calculating the median
    st.subheader("√âtapes pour calculer la mediane")
    st.markdown(
    """
    1. **Classez les donn√©es :** Commencez par classer les donn√©es salariales par ordre croissant.
    2. **Trouver la valeur m√©diane :** si l'ensemble de donn√©es comporte un nombre **impair** de valeurs (N), la m√©diane est la valeur m√©diane. 
       Si le nombre de valeurs est **pair**, la m√©diane est la moyenne des deux valeurs m√©dianes.
    """
)


    # Calculate the median
    sorted_salaries = sorted(salaries)
    n = len(sorted_salaries)

    if n % 2 == 1:
    # Odd number of values
        median = sorted_salaries[n // 2]
    else:
    # Even number of values
        middle1 = sorted_salaries[(n - 1) // 2]
        middle2 = sorted_salaries[n // 2]
        median = (middle1 + middle2) / 2
    
    # Display the calculated median
    st.write(f"**üí°Salaire median : {median} (en ‚Ç¨)**")
    

    # Import necessary libraries
    import streamlit as st
    import plotly.express as px

# Data: Salaries in dollars
    salaires = [55000, 60000, 65000, 58000, 70000, 62000, 56000, 59000, 75000, 61000]

# Create a box plot using Plotly Express
    fig = px.box(x=salaires, labels={'x': 'Salaires (k‚Ç¨)'}, title="Box Plot de la distribution des salaires")

# Display the plot in the Streamlit app
    st.plotly_chart(fig)


    st.markdown("")


    st.markdown("**üîÆInterpretation du box plot (boite √† moustaches) de la distribution des salaires**")


    st.markdown("Le **box plot** fournit un r√©sum√© de la r√©partition des salaires, y compris des mesures de tendance centrale et de variabilit√©.")

    st.markdown("La boite repr√©sente l'intervalle interquartile (IQR), les bords inf√©rieur (√† gauche) et sup√©rieur (√† droite) de la case marquant respectivement le premier quartile (Q1) et le troisi√®me quartile (Q3).")

    st.markdown("Intervalle interquartile (IQR) : la moiti√© moyenne des salaires (de Q1 √† Q3) se situe entre environ 58 000 ‚Ç¨ et 65 000 ‚Ç¨.")

    st.markdown("La ligne verticale √† l‚Äôint√©rieur de la boite repr√©sente le salaire m√©dian (Q2) : environ 60 500 ‚Ç¨.")

    st.markdown("Les ¬´ moustaches ¬ª s'√©tendent des bords de la bo√Æte jusqu'aux salaires minimum (55 000 ‚Ç¨) et maximum (75 000 ‚Ç¨) dans une fourchette raisonnable : **il n'y a pas de valeurs aberrantes dans l'ensemble de donn√©es**, car tous les salaires se situent dans la fourchette raisonnable des ¬´ moustaches ¬ª.")

    st.markdown("")


    st.markdown("")

    
    st.markdown("- **Mode** : c'est la valeur la plus courante dans un ensemble de donn√©es. Le mode est calcul√© en identifiant la valeur qui se produit le plus fr√©quemment.") 
    st.markdown("Il s'agit d'une mesure simple qui peut √™tre utilis√©e pour r√©sumer et d√©crire des donn√©es, en conjonction avec la moyenne et la m√©diane pour obtenir une image plus compl√®te des donn√©es.") 
    st.markdown("‚ö†Ô∏èCependant, le mode a certaines limites. Par exemple, ce n'est pas un bon indicateur de tendance centrale lorsque les donn√©es contiennent des valeurs aberrantes, car ces valeurs peuvent fausser la distribution et rendre le mode moins repr√©sentatif de la‚ö°**valeur typique**‚ö°dans les donn√©es.") 
    st.markdown("Dans de tels cas, d'autres mesures de tendance centrale, telles que la moyenne ou la m√©diane, peuvent √™tre plus appropri√©es.")


# Import necessary libraries
    import streamlit as st
    import pandas as pd
    import plotly.express as px

# Display the formula for calculating the mode
    st.subheader("Comment trouver le mode ?")
    st.markdown("Le mode est la valeur qui appara√Æt **le plus fr√©quemment** dans l'ensemble de donn√©es.)")

    st.markdown("**üèÄApplication 3**")
    
# Sample data without outliers
    data_without_outliers = [35000, 40000, 42000, 45000, 48000, 50000, 50000, 52000, 55000, 58000, 60000]

# Create a DataFrame
    df_without_outliers = pd.DataFrame(data_without_outliers, columns=['Salaires (‚Ç¨)'])

# Display the data table
    st.subheader("Echantillon de donn√©es salariales SANS outliers (valeurs aberrantes)")
    st.dataframe(df_without_outliers)
    

# Calculate the mode
    mode_without_outliers = df_without_outliers['Salaires (‚Ç¨)'].mode().values[0]


# Explanation and calculation steps
    st.subheader("√âtapes pour d√©terminer le mode")

    # Step 1: Frequency Distribution
    st.write("**√âtape 1**: Cr√©ez une distribution de fr√©quence pour compter les occurrences de chaque valeur dans l'ensemble de donn√©es.")
    frequency_table_without_outliers = df_without_outliers['Salaires (‚Ç¨)'].value_counts().reset_index()
    frequency_table_without_outliers.columns = ['Salaires (‚Ç¨)', 'Frequence']
    st.dataframe(frequency_table_without_outliers)

# Step 2: Find the Maximum Frequency
    st.write("**√âtape 2** : Identifiez la ou les valeurs avec la fr√©quence (mode) la plus √©lev√©e.")
    max_frequency_without_outliers = frequency_table_without_outliers['Frequence'].max()
    mode_values_without_outliers = frequency_table_without_outliers[frequency_table_without_outliers['Frequence'] == max_frequency_without_outliers]['Salaires (‚Ç¨)'].tolist()
    st.write(f"üí°La valeur du **mode** est : {mode_values_without_outliers}")

# Create a histogram
    fig_without_outliers = px.histogram(df_without_outliers, x='Salaires (‚Ç¨)', nbins=6, title='Histogramme de la distribution des salaires')
    st.plotly_chart(fig_without_outliers)


    st.markdown("")


    st.markdown("**üîÆInterpretation de l'histogramme des salaires sans valeurs aberrantes**")


    st.markdown("L'histogramme est une distribution de fr√©quence qui montre le nombre d'observations dans des intervalles sp√©cifiques. Dans notre cas, l'histogramme repr√©sente la r√©partition des salaires sans valeurs aberrantes.") 
    
    st.markdown("Cet histogramme montre une r√©partition relativement sym√©trique centr√©e autour des valeurs moyennes (entre 45 000 et 55 000 ‚Ç¨), avec un pic autour de 50 000 ‚Ç¨. Les donn√©es semblent √™tre distribu√©es assez normalement, sans outliers significatifs.")
    
    st.markdown("Il appara√Æt quelques observations en dessous de 45 000 et au-dessus de 60 000 ‚Ç¨. Cela sugg√®re que la majorit√© des employ√©s ont des salaires similaires, et que seuls quelques-uns ont des salaires nettement inf√©rieurs ou sup√©rieurs.")

    
    st.markdown("")


    st.markdown("**üèÄApplication 4**")


# Sample data with outliers
    data_with_outliers = [35000, 40000, 42000, 45000, 48000, 50000, 50000, 52000, 55000, 58000, 60000, 100000, 120000]

# Create a DataFrame
    df_with_outliers = pd.DataFrame(data_with_outliers, columns=['Salaires (‚Ç¨)'])

# Display the data table
    st.subheader("Echantillon de donn√©es salariales AVEC outliers (valeurs aberrantes)")
    st.dataframe(df_with_outliers)

# Calculate the mode
    mode_with_outliers = df_with_outliers['Salaires (‚Ç¨)'].mode().values[0]

# Explanation and calculation steps
    st.subheader("Tableau de la distribution de fr√©quence")

    # Step 1: Frequency Distribution
    frequency_table_with_outliers = df_with_outliers['Salaires (‚Ç¨)'].value_counts().reset_index()
    frequency_table_with_outliers.columns = ['Salaires (‚Ç¨)', 'Frequence']
    st.dataframe(frequency_table_with_outliers)

# Step 2: Find the Maximum Frequency
    max_frequency_with_outliers = frequency_table_with_outliers['Frequence'].max()
    mode_values_with_outliers = frequency_table_with_outliers[frequency_table_with_outliers['Frequence'] == max_frequency_with_outliers]['Salaires (‚Ç¨)'].tolist()
    st.write(f"üí°La valeur du **mode** est : {mode_values_with_outliers}")

# Create a histogram
    fig_with_outliers = px.histogram(df_with_outliers, x='Salaires (‚Ç¨)', nbins=6, title='Histogramme de la distribution des salaires (avec Outliers)')
    st.plotly_chart(fig_with_outliers)

# Explanation
    st.markdown("**üîÆInterpretation de l'histogramme des salaires avec valeurs aberrantes**")
    st.write("""
    Dans cet exemple, nous avons un √©chantillon de donn√©es salariales qui inclut des valeurs aberrantes.  
    Il s'agit des valeurs extr√™mes qui peuvent **fausser la distribution**. Lorsque des valeurs aberrantes sont pr√©sentes, 
    le mode peut **ne pas repr√©senter avec pr√©cision la tendance centrale**
    car il est fortement influenc√© par les valeurs aberrantes. Dans de tels cas, d‚Äôautres mesures 
    comme la moyenne ou la m√©diane peuvent permettre de mieux comprendre le niveau de salaire typique.
""")


    st.markdown("")


# Import necessary libraries
    import streamlit as st
    import plotly.express as px

# Data: Salaries in dollars
    salaires = [35000, 40000, 42000, 45000, 48000, 50000, 50000, 52000, 55000, 58000, 60000, 100000, 120000]

# Create a box plot using Plotly Express
    fig = px.box(x=salaires, labels={'x': 'Salaires (k‚Ç¨)'}, title="Box Plot de la distribution des salaires avec outliers")

# Display the plot in the Streamlit app
    st.plotly_chart(fig)

    st.markdown("**üîÆInterpretation du box plot de la distribution des salaires avec valeurs aberrantes**")
    st.write("""
    Le **box plot** nous confirme visuellement la pr√©sence de valeurs aberrantes dans les donn√©es, avec des salaires allant de 35 000 ‚Ç¨ √† 120 000 ‚Ç¨.  
    La ligne verticale √† l‚Äôint√©rieur de la boite nous montre que le salaire m√©dian est de 50 000 ‚Ç¨, et les moustaches nous montrent l'√©cart des salaires dans une plage de 1,5 fois l'√©cart interquartile (IQR). 
    Les valeurs aberrantes, repr√©sent√©es par les deux points individuels en dehors des moustaches, sont les salaires de 100 000 ‚Ç¨ et 120 000 ‚Ç¨.
    La pr√©sence de valeurs aberrantes dans les donn√©es sugg√®re que certains employ√©s ont des salaires nettement sup√©rieurs √† ceux de la majorit√© des employ√©s.
""")


if st.button("Continuer vers la suite du Chap.2 - **B/ Mesures de la variabilit√©**"):
    
    st.subheader("üìàChap.2-B/ Mesures de la variabilit√©üìâ")
    
    st.markdown("Les mesures de variabilit√© sont utilis√©es pour d√©crire la dispersion (propagation) des points de donn√©es dans un ensemble de donn√©es.") 
    st.markdown("**Il existe plusieurs mesures principales de la variabilit√©** :")
    
    st.markdown("- **Plage** : La plage (gamme, √©tendue) est la mesure de variabilit√© la plus simple, elle repr√©sente la diff√©rence entre les valeurs maximales et minimales dans un ensemble de donn√©es. Elle fournit une estimation approximative de la variabilit√©, mais est sensible aux valeurs aberrantes.")

    st.markdown("**Math√©matiquement, on peut l'exprimer comme suit :**")

    st.subheader("Plage = Valeur maximale - Valeur minimale")


    st.markdown("")

    

    st.markdown("**üèÄApplication 5**")

    st.write("""Supposons que nous disposions d'un √©chantillon de donn√©es sur l'√¢ge des employ√©s d'une entreprise. 
    
    √¢ges = [22, 25, 30, 35, 40, 45, 50, 55, 60 et 65 ans] 
    
    üí°La plage de cet √©chantillon de donn√©es est : 65 - 22 = 43 ans.
""")


    st.markdown("")


    st.markdown("Bien que cette plage puisse donner un aper√ßu de la r√©partition des √¢ges au sein de l'entreprise, elle pr√©sente certaines limites :")

    st.markdown("1. Elle ne tient pas compte de la distance entre les points de donn√©es cons√©cutifs.")
    st.markdown("2. Elle peut √™tre affect√©e par des valeurs extr√™mes ou des valeurs aberrantes.")
    

    st.markdown("Pour mieux **visualiser et comprendre** la r√©partition des √¢ges dans notre √©chantillon de donn√©es, nous pouvons utiliser d'autres repr√©sentations en plus de la plage. Certaines techniques de visualisation populaires incluent : Histogramme et Box plot.") 
    
    
    st.markdown("")


     # Import necessary libraries
    import streamlit as st
    import plotly.express as px

# Data: Salaries in dollars
    √¢ges = [22, 25, 30, 35, 40, 45, 50, 55, 60, 65]

# Create a box plot using Plotly Express
    fig = px.box(x=√¢ges, labels={'x': '√¢ge des employ√©s (ans)'}, title="Box Plot de l√¢ge des employ√©s de l'entreprise")

# Display the plot in the Streamlit app
    st.plotly_chart(fig)

    st.markdown("**üîÆInterpretation du box plot de l√¢ge des employ√©s de l'entreprise**")


    st.markdown("Ce **box plot** affiche la r√©partition des √¢ges dans l'√©chantillon de donn√©es, l'axe horizontal repr√©sentant les diff√©rentes tranches d'√¢ge.")

    st.markdown("L'intervalle interquartile **IQR** (repr√©sent√© par la boite) nous montre que la majorit√© des employ√©s (50 %) ont entre 30 et 55 ans.")
    
    st.markdown("L‚Äô√¢ge m√©dian, (repr√©sent√© par la ligne verticale dans la boite) est de 42.5 ans, ce qui signifie que la moiti√© des employ√©s de l'√©chantillon de donn√©es a plus de 42.5 ans et l'autre moiti√© moins : il s'agit d'une information utile √† conna√Ætre, car elle peut aider √† √©clairer les politiques et les pratiques li√©es au d√©veloppement et √† la r√©tention des employ√©s.")

    st.markdown("Ce **box plot** montre √©galement les quartiles inf√©rieur (Q1 = 30 ans) et sup√©rieur (Q3 = 55 ans), qui sont repr√©sent√©s respectivement par les c√¥t√©s gauche et droit de la bo√Æte. Les valeurs de **Q1 et Q3** signifient respectivement que 25 % des employ√©s ont moins de 30 ans et 25 %de plus de 55 ans.")

    st.markdown("")


    st.markdown("")
    
    
    st.markdown("- **Variance** : La variance est une mesure de variabilit√© plus sophistiqu√©e que la plage. C'est une mesure de **comment** les donn√©es d'un ensemble diff√®rent de la moyenne de l'ensemble.") 

    # Display the theoretical formula for calculating the variance
    st.subheader("Formule th√©orique de la Variance")
    st.latex(r'Variance (\sigma^2) = \frac{\sum_{i=1}^{n}(X_i - \mu)^2}{N}')

    st.markdown("O√π :")

    st.markdown("**œÉ¬≤** repr√©sente la variance")

    st.markdown("**X·µ¢** repr√©sente chaque point de donn√©es individuel")

    st.markdown("**Œº** repr√©sente la moyenne de l'√©chantillon de donn√©es")

    st.markdown("**N** est le nombre total de points de donn√©es")


    st.markdown("")


    st.markdown("**üèÄApplication 6**")
    st.markdown("‚ùóPour la suite nous pourrions exprimer nos **scores de satisfaction** en ESI (employee satisfaction index) mais cela n'a aucun int√©r√™t pour illustrer le calcul de la variance, donc nous travaillerons avec les donn√©es brutes.")

    st.markdown("Supposons que vous ayez men√© une enqu√™te sur l'engagement des employ√©s et que vous ayez collect√© des scores de satisfaction sur une √©chelle de 1 √† 10, o√π 1 repr√©sente tr√®s insatisfait et 10 repr√©sente tr√®s satisfait. Vous avez interrog√© 10 employ√©s.")
    

    import streamlit as st
    import pandas as pd
    import plotly.express as px

# Create a high variance dataset
    data = {
    'Matricule': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'Score de satisfaction': [1, 3, 4, 7, 9, 2, 10, 5, 8, 6]
    }

    df = pd.DataFrame(data)

    # Display the dataset
    st.write("Voici leurs scores de satisfaction :")
    st.write(df)

    st.markdown("")
    

    st.markdown("Maintenant, calculons la variance pour cet ensemble de donn√©es √©tape par √©tape :")


    st.markdown("")


    st.markdown("√âtape 1 : Calculons la Moyenne (**Œº**) des scores de satisfaction")

    # Display the Mean
    st.latex(r'\text{Moyenne} = \frac{\sum_{i=1}^{n}X_i}{n} = \frac{1+3+4+7+9+2+10+5+8+6‚Äã}{10} = \frac{55‚Äã}{10} = 5.5')
    

    
    

# Sample data of Satisfaction Score
    scores_de_satisfaction = [10, 2, 8, 4, 6, 1, 9, 7, 3, 5]

# Sample data of Squared Difference
    squared_difference = [4.5, 3.5, 8, 4, 6, 1, 9, 7, 3, 5]

# Create a DataFrame
    df_without_outliers = pd.DataFrame(scores_de_satisfaction, columns=['Salaires (‚Ç¨)'])

# Display the data table
    st.subheader("Echantillon de donn√©es salariales SANS outliers (valeurs aberrantes)")
    st.dataframe(df_without_outliers)

    

    

    
    

    

# Display the steps for calculating the mean
    st.subheader("√âtapes pour calculer la variance")
    st.markdown(
    """
    1. D√©terminez la **moyenne** des donn√©es.
    2. **Soustrayez** la moyenne de chaque point de donn√©es pour trouver les diff√©rences.
    3. **Mettez au carr√©** chaque diff√©rence pour √©liminer les valeurs n√©gatives et souligner les √©carts plus importants.
    4. **Calculez** la moyenne des pr√©c√©dents carr√©s.
    """
)

# Display the calculated mean
    st.write(f"**üí°Salaire moyen: {mean_salary:.2f} (en ‚Ç¨)**")
    

    st.markdown("")
    
                
    st.markdown("- **√âcart type** : L'√©cart type est une mesure de la dispersion des valeurs des donn√©es par rapport √† la moyenne de l'ensemble de donn√©es. C'est la racine carr√©e de la variance. Il s'agit de la mesure de variabilit√© la plus couramment utilis√©e et fournit une mesure de la dispersion dans les m√™mes unit√©s que l'ensemble de donn√©es d'origine.")            

if st.button("Continuer vers la suite du Chap.2 - **C/ Techniques graphiques**"):
    
    st.subheader("üìàChap.2-C/ Techniques graphiquesüìâ")
    
    st.markdown("Des techniques graphiques peuvent √™tre utilis√©es pour am√©liorer encore la compr√©hension d'un ensemble de donn√©es.") 
    st.markdown("Les repr√©sentations visuelles peuvent aider les professionnels RH √† identifier facilement des mod√®les ou des tendances dans les donn√©es et √† communiquer des informations aux parties prenantes.")
    
    st.markdown("**Certains types courants de graphiques incluent** :") 
    
    st.markdown("- **Histogramme** : c'est un graphique qui montre la distribution de fr√©quence des donn√©es num√©riques. Les donn√©es sont divis√©es en intervalles ou bacs, et la hauteur de la barre repr√©sente la fr√©quence de chaque intervalle.")
    
    st.markdown("- **Bo√Æte √† moustache** : ce graphique montre la distribution de donn√©es num√©riques √† l'aide de quartiles. Il affiche le minimum, le maximum, la m√©diane et les premier et troisi√®me quartiles des donn√©es.")
    
    st.markdown("- **Nuages de points** : un graphique qui montre la relation entre deux variables num√©riques. Chaque point repr√©sente une paire de valeurs et le mod√®le des points peut indiquer la force et la direction de la relation.")
    



        
        
        
        
        
        
