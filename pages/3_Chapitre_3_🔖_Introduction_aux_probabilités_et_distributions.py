


import streamlit as st

st.markdown("# Chapitre 3")
st.sidebar.markdown("# Chapitre 3")

st.title("Introductions aux probabilit√©s et distributions")

st.markdown("Ce chapitre sert d'**introduction** en fournissant un **aper√ßu des concepts de base en probabilit√©s et distributions, et leurs applications possibles dans le domaine des RH**.")

st.markdown("La **th√©orie des probabilit√©s** est la branche des math√©matiques qui **quantifie la possibilit√© qu'un √©v√©nement particulier se produise** (√©v√©nement al√©atoire). Cette possibilit√© est exprim√©e sous la forme d'un nombre compris entre 0 et 1.")

st.markdown("En termes simples, la probabilit√© quantifie le degr√© de certitude ou d'incertitude associ√© √† un r√©sultat sp√©cifique. Elle est calcul√©e en divisant le nombre de r√©sultats favorables par le nombre total de r√©sultats possibles dans une situation donn√©e.")


st.markdown("")


if st.button("Cliquez pour acceder au Chap.3 - **A/ Concepts de cl√©s**"):
    
    st.subheader("üìàChap.3-A/ Concepts de cl√©süìâ")

    st.markdown("")

    st.markdown("**Les concepts cl√©s en probabilit√©s comprennent les notions suivantes** :")

    
    st.markdown("")
    

    st.markdown("üí°**Variable al√©atoire** : c'est une quantit√© qui prend diff√©rentes valeurs √† la suite d'√©v√©nements al√©atoires. Une variable al√©atoire peut √™tre **discrete ou continue**.") 
    
    st.markdown("")

    st.markdown("üí°**Variable al√©atoire discr√®te** : C'est une variable qui ne peut prendre que certaines valeurs distinctes. Par exemple, le nombre d'employ√©s d'un service ne peut prendre que des valeurs enti√®res.")

    st.markdown("")
                
    st.markdown("üí°**Variable al√©atoire continue** : C'est une variable qui peut prendre n'importe quelle valeur dans une plage. Par exemple, le salaire d‚Äôun employ√© peut prendre n‚Äôimporte quelle valeur dans une certaine fourchette.")

    
    st.markdown("") 

    
    st.markdown("")

    st.markdown("- **Espace d'√©chantillonnage et √©v√©nements** : l'espace d'√©chantillonnage **repr√©sente l'ensemble de tous les r√©sultats possibles d'une exp√©rience**. Les **√©v√©nements sont des sous-ensembles** de l'espace d'√©chantillonnage, repr√©sentant des r√©sultats sp√©cifiques ou des combinaisons de r√©sultats.")

    
    st.markdown("")


    st.markdown("**üèÄApplication 15**")

    st.markdown("Illustrons les concepts d'espace d'√©chantillonnage et d'√©v√©nements par un sc√©nario hypoth√©tique dans lequel nous analysons les qualifications des candidats √† un poste vacant.")

    st.markdown("Ci-dessous un √©chantillon des donn√©es de 5 candidats :")
    
    
    import streamlit as st
    import plotly.express as px
    import pandas as pd

# Sample Data
    data = {
        "Candidat": ["Candidat 1", "Candidat 2", "Candidat 3", "Candidat 4", "Candidat 5"],
        "Exp√©rience (Ann√©es)": [2, 4, 3, 5, 1],
        "Dipl√¥me": ["Bachelor", "Master", "Bachelor", "Ph.D.", "Master"],
    }

    df = pd.DataFrame(data)

# Display the sample data
    st.dataframe(df)

# Calculate the sample space for education levels
    sample_space_education = df["Dipl√¥me"].unique()

# Calculate the sample space for experience
    sample_space_experience = df["Exp√©rience (Ann√©es)"].unique()

# Explain Sample Space and Events
    st.markdown("**Explication**:")
    st.markdown(
        """
    - **Espace √©chantillon pour les dipl√¥mes :** L'espace √©chantillon pour les dipl√¥mes comprend tous les dipl√¥mes possibles dans notre ensemble de donn√©es. Dans notre cas, il se compose de trois cat√©gories : ¬´ Bachelor ¬ª, ¬´ Master ¬ª et ¬´ Ph.D ¬ª

    - **Espace √©chantillon pour l'exp√©rience (ann√©es):** L'espace √©chantillon pour l'exp√©rience comprend toutes les ann√©es d'exp√©rience uniques dans notre ensemble de donn√©es. Dans ce cas, il s'agit des valeurs [2, 4, 3, 5, 1].

    Maintenant, d√©finissons quelques √©v√©nements bas√©s sur cet exemple d'espace :
    - √âv√©nement A : Candidats titulaires d'un Master
    - √âv√©nement B : Candidats ayant plus de 3 ans d'exp√©rience

    Nous pouvouns visualiser ces √©v√©nements ci-dessous.
    """
    )

# Define Events
    event_A = df[df["Dipl√¥me"] == "Master"]
    event_B = df[df["Exp√©rience (Ann√©es)"] > 3]

# Visualize Event A (Master's Degree)
    st.subheader("√âv√©nement A: Candidats avec un dipl√¥me de Master")
    fig_A = px.scatter(event_A, x="Exp√©rience (Ann√©es)", y="Candidat", color="Dipl√¥me", title="√âv√©nement A")
    st.plotly_chart(fig_A)

# Visualize Event B (More than 3 Years of Experience)
    st.subheader("√âv√©nement B: Candidats avec plus de 3 ans d'exp√©rience")
    fig_B = px.scatter(event_B, x="Exp√©rience (Ann√©es)", y="Candidat", color="Dipl√¥me", title="√âv√©nement B")
    st.plotly_chart(fig_B)


    st.markdown("")


    st.markdown("- **R√®gles de probabilit√©** : La **probabilit√© d'un √©v√©nement varie de 0** (√©v√©nement impossible) √† **1** (√©v√©nement certain). Il existe trois r√®gles principales de probabilit√© :")

    st.markdown("")

    st.markdown("La r√®gle de la somme : la probabilit√© que l'un des deux √©v√©nements exclusifs se produise est √©gale √† la somme de leurs probabilit√©s individuelles.")

    st.markdown("")
    
    st.markdown("La r√®gle du produit : la probabilit√© que deux √©v√©nements se produisent tous deux est √©gale au produit de leurs probabilit√©s individuelles.")

    st.markdown("")

    st.markdown("La r√®gle du compl√©ment : La probabilit√© qu‚Äôun √©v√©nement ne se produise pas est √©gale √† un moins la probabilit√© que l‚Äô√©v√©nement se produise.")


    st.markdown("")


    st.markdown("**üèÄApplication 16**")

    st.markdown("Illustrons les trois principales r√®gles de probabilit√© par un sc√©nario hypoth√©tique dans lequel nous analysons les candidats et leurs qualifications pour deux postes diff√©rents.")
    
    st.markdown("Disons que nous devons embaucher des candidats pour deux postes : ¬´ Analyste de donn√©es RH ¬ª et ¬´ Coordonnateur RH ¬ª.

    st.markdown("Supposons que nous ayons deux groupes de candidats : un pour le poste ¬´ Analyste de donn√©es RH ¬ª et un autre pour le poste de ¬´ Coordonnateur RH ¬ª.) 
    
    st.markdown("La qualification de chaque candidat est class√©e comme ¬´ Qualifi√© ¬ª ou ¬´ Non qualifi√© ¬ª. Voici les exemples de donn√©es :")


    import streamlit as st
    import pandas as pd
    import plotly.express as px

# Sample Data
    data = {
        "Applicant ID": [1, 2, 3, 4, 5],
        "Data Analyst Qualification": ["Qualified", "Not Qualified", "Qualified", "Not Qualified", "Qualified"],
        "HR Coordinator Qualification": ["Not Qualified", "Qualified", "Not Qualified", "Qualified", "Not Qualified"],
    }

    df = pd.DataFrame(data)

# Streamlit App
    st.title("HR Data Analysis: Probability Rules")

# Display the sample data
    st.subheader("Sample Data:")
    st.dataframe(df)

# Rule 1: The Sum Rule
    st.subheader("Rule 1: The Sum Rule")
    st.latex(r"P(A \cup B) = P(A) + P(B) - P(A \cap B)")
    st.markdown(
        """
    The sum rule states that the probability of either one of two exclusive events occurring 
    is equal to the sum of their individual probabilities minus their joint probability.

    In this context, let's calculate the probability of hiring for either the Data Analyst position or 
    the HR Coordinator position.

    - Event A: Being Qualified for Data Analyst
    - Event B: Being Qualified for HR Coordinator

    We'll calculate P(A), P(B), and P(A and B) and use the sum rule formula to find P(A or B).
    """
    )

# Calculate P(A): Probability of being Qualified for Data Analyst
    total_data_analyst = df["Data Analyst Qualification"].count()
    qualified_data_analyst = df[df["Data Analyst Qualification"] == "Qualified"]["Data Analyst Qualification"].count()
    p_A = qualified_data_analyst / total_data_analyst

# Calculate P(B): Probability of being Qualified for HR Coordinator
    total_hr_coordinator = df["HR Coordinator Qualification"].count()
    qualified_hr_coordinator = df[df["HR Coordinator Qualification"] == "Qualified"]["HR Coordinator Qualification"].count()
    p_B = qualified_hr_coordinator / total_hr_coordinator

# Calculate P(A and B): Probability of being Qualified for both positions
    qualified_both = df[(df["Data Analyst Qualification"] == "Qualified") & (df["HR Coordinator Qualification"] == "Qualified")]["Applicant ID"].count()
    p_A_and_B = qualified_both / total_data_analyst  # Using the data analyst total for joint probability

# Calculate P(A or B) using the Sum Rule formula
    p_A_or_B = p_A + p_B - p_A_and_B

    st.latex(f"P(A) = {p_A}")
    st.latex(f"P(B) = {p_B}")
    st.latex(f"P(A \cap B) = {p_A_and_B}")
    st.latex(f"P(A \cup B) = {p_A_or_B}")

# Rule 2: The Product Rule
    st.subheader("Rule 2: The Product Rule")
    st.latex(r"P(A \cap B) = P(A) \cdot P(B)")
    st.markdown(
        """
    The product rule states that the probability of two events both occurring is equal 
    to the product of their individual probabilities.

    In this context, let's calculate the probability of hiring for both the Data Analyst position and 
    the HR Coordinator position.

    - Event A: Being Qualified for Data Analyst
    - Event B: Being Qualified for HR Coordinator

    We'll calculate P(A) and P(B) and use the product rule formula to find P(A and B).
    """
    )

# Calculate P(A and B) using the Product Rule formula
    p_A_and_B = p_A * p_B

    st.latex(f"P(A) = {p_A}")
    st.latex(f"P(B) = {p_B}")
    st.latex(f"P(A \cap B) = {p_A_and_B}")

# Rule 3: The Complement Rule
    st.subheader("Rule 3: The Complement Rule")
    st.latex(r"P(\neg A) = 1 - P(A)")
    st.markdown(
        """
    The complement rule states that the probability of an event not occurring is equal 
    to one minus the probability of the event occurring.

    In this context, let's calculate the probability of not being Qualified for the Data Analyst position.

    - Event A: Being Qualified for Data Analyst

    We'll calculate P(A) and use the complement rule formula to find P(not A).
    """
    )

# Calculate P(not A) using the Complement Rule formula
    p_not_A = 1 - p_A

    st.latex(f"P(A) = {p_A}")
    st.latex(f"P(\neg A) = {p_not_A}")
























    




    
    
    st.markdown("- **Exemple 1 - Application possible en RH** : Supposons qu'un charg√© d'√©tudes RH veuille d√©terminer la probabilit√© qu'un employ√© soit absent un jour particulier. Il peut collecter des donn√©es historiques sur les absences des employ√©s et calculer la proportion d'absences par rapport au nombre total de jours de travail pour estimer la probabilit√©.")

if st.button("Continuer vers la suite du Chap.3 - **B/ Distributions de probabilit√© discr√®te**"):
    
    st.subheader("üìàChap.2-B/ Distributions de probabilit√© discr√®teüìâ")
    
    st.markdown("Des **distributions de probabilit√© discr√®tes sont utilis√©es lorsque la variable al√©atoire ne peut prendre que des valeurs distinctes et s√©par√©es**.") 
    
    st.markdown("Deux exemples courants sont la **distribution binomiale** et la **distribution de Poisson**.")
    
    st.markdown("- **Distribution binomiale** : La distribution binomiale mod√©lise le **nombre de succ√®s (x)** dans un nombre fixe d'essais ind√©pendants, chacun avec la **m√™me probabilit√© de succ√®s (p)**. Il est caract√©ris√© par deux param√®tres, **n (nombre d'essais) et p (probabilit√© de succ√®s)**.")
    
    st.markdown("- **Exemple 2 - Application possible en RH** : Consid√©rez un charg√© d'√©tudes RH √† qui l'on demande de d√©terminer la probabilit√© de s√©lectionner trois candidats parmi un groupe de 10 pour un entretien d'embauche. En utilisant la distribution binomiale, le charg√© d'√©tudes RH peut calculer la probabilit√© d'exactement trois s√©lections r√©ussies, compte tenu d'un certain taux de r√©ussite (par exemple, la proportion des candidats qualifi√©s dans le bassin.")
    
    st.markdown("- **Distribution de Poisson** : La distribution de Poisson mod√©lise le **nombre d'√©v√©nements se produisant dans un intervalle de temps ou d'espace fixe**. Il est **souvent utilis√© pour analyser des √©v√©nements rares** qui se produisent ind√©pendamment √† un **taux moyen constant (Œª)**.")
    
    st.markdown("- **Exemple 3 - Application possible en RH** : Un charg√© d'√©tudes RH dans le secteur industriel peut devoir analyser mensuellement le nombre d'accidents du travail pour identifier les probl√®mes de s√©curit√©. **En ajustant les donn√©es historiques d'accidents du travail √† une distribution de Poisson**, le charg√© d'√©tudes RH peut estimer la probabilit√© qu'un nombre sp√©cifique d'accidents du travail se produisent au cours d'un mois donn√©.")

if st.button("Continuer vers la suite du Chap.3 - **C/ Distributions de probabilit√© continue**"):
    
    st.subheader("üìàChap.3-C/ Distributions de probabilit√© continueüìâ")
    
    st.markdown("**Les distributions de probabilit√© continues sont utilis√©es lorsque la variable al√©atoire peut prendre n'importe quelle valeur dans une plage.**") 
    
    st.markdown("La distribution continue la plus utilis√©e est la **distribution normale**.")
    
    st.markdown("- **La distribution normale**, √©galement connue sous le nom de **distribution gaussienne ou courbe en cloche**, se caract√©rise par sa **courbe sym√©trique en forme de cloche**. Elle est d√©finie par deux param√®tres : la **moyenne** (Œº) et **l'√©cart type** (œÉ). De nombreux ph√©nom√®nes naturels suivent une distribution normale, y compris dans le domaine des RH.")
    
    st.markdown("- **Exemple 3 - Application possible en RH** : Un charg√© d'√©tudes RH doit analyser les notes de performance des employ√©s pour attribuer une prime de rendement individuelle (prime non obligatoire). Si les notes sont distribu√©es normalement, le charg√© d'√©tudes RH peut utiliser les propri√©t√©s de la distribution normale pour d√©terminer la proportion d'employ√©s appartenant √† des cat√©gories de performance sp√©cifiques (par exemple, les plus performants, ceux qui affichent une performance moyenne, et les moins performants.)")


    st.markdown("")


    def redirect_button(url: str, text: str= None, color="#FD504D"):
        st.markdown(
        f"""
        <a href="{url}" target="_blank">
            <div style="
                display: inline-block;
                padding: 0.5em 1em;
                color: #FFFFFF;
                background-color: {color};
                border-radius: 3px;
                text-decoration: none;">
                {text}
            </div
        </a>
        """,
        unsafe_allow_html=True
        )
    redirect_button("https://cours-stats-rh.streamlit.app/Quiz_3_-_Probabilit√©s_et_distributionsüìâ","Quiz du chapitre 3")
    

    
    
    
    

            
